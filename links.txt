https://kifarunix.com/install-nexus-repository-manager-on-ubuntu/
https://www.vultr.com/docs/install-sonarqube-on-ubuntu-20-04-lts/
remember that when adding nexus user to sudoers file, use package installer from landmark
Talking about kubernetes
make use of profs read me file to install.
use the first script for both the master and the slave nodes
for the master nodes, complete the whole scripts , log out from root user and perform the remaining tasks.
for the slave users make sure you run the kubeadm init in the master and get your token, add that token to the script for the worker nodes
....
When setting up Eks cluster, after you have set up eks on aws, and set up worket node groups, to connect to your system you will have to create an external ec2 instance where you will do the following:
- Install Kubectl from official website
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
- Install Aws Cli 
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
---
Steps to setup EKS cluster
1. Create a VPC with 2 Public and @ private subnets. each public and private subnet pair should be in a different availability zone.
2. Set Auto assign ipaddresses to your subnets if you want them to be a part of the cluster.
3. Create an IAM role, the use case should be EKS cluster.
4. Create a second IAM role, this one should have its use case as ec2. Attach 4 policies namely
a. WorkernodePolicy
b. Container Network interface CNI policy
c. Container registry read only policy
d. EBS driver policy
5. Create a Security group for your VPC and allow all traffics.
6. create EKS cluster with the eks role, security group and VPC
7. Create a node group from the compute tab. Make sure to set templates with a private key. Also make sure to attach the required role, VPN and Security group.
8. Create a new instance where you would connect to the control plae from
9. Ssh into the instance and nstall kubectl with the link already provided abouve, install aws cli too.
10. Go to identity access management and create a new access key. when configuring your access, use the current availability zone where your control plane is located and use 'json' when asked for output format
11. aws eks update-kubeconfig --name firstcluster --region us-east-1
note that in the above code firstcluster will be name of your current kube cluster you want to access
12. Install git and run the code below to create a dynamic storage for pV and PVC creation
Dynamic Storage provisioning allows storage volumes to be created on demand. instead of making calls to CSP to new volumes and then create Persistent volume objects.
kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.12"
DONE!!!
------------------------------------
Integrating Docker and Jenkins
- You can install jenkins in the control plane you created for kubernetes
- install Jenkins from the link below
https://www.jenkins.io/doc/book/installing/linux/
-remember to install java first.
- On the same server, you must install docker from the link below
https://docs.docker.com/engine/install/ubuntu/
Install the repository first before you go for the docker engine
-note that Jenkins and docker both automatically creates a group
add jenkins to the /etc/sudoers file with nano
look out for the comment below and add the jenkins previlege code
#members of the admin group may gain root previlege
jenkins ALL=(ALL) NOPASSWD: ALL
if it still doesnt work, run the script below
---
#!/bin/bash
add ubuntu to docker group
sudo groupadd docker
sudo usermod -aG docker $current user where jenkins is installed
newgrp docker
---
you can reboot if error persists
To integrate docker and jenkins you have to install docker on jenkins available plug in
you have to go to global tool configuration and choose docker too
in the docker build stage, you can run the following under the stage tab
---
rm -rf dockerimg
mkdir dockerimg
cd dockerimg
cp /var/lib/jenkins/workspace/cicd/target/teslar.war . #note that cicd is the name of the pipeline job and tesla.war is the name of the packaged artifact. also note the last fullstop
touch dockerfile
cat <<EOT>>dockerfile
FROM tomcat:8.0.20-jre8
ADD teslar.war /usr/local/tomcat/webapps/
EOT
sudo docker build -t tesla:1.0 .
---
copy the above script, go to create new pipeline syntax, 
in the dropdown, choose script shell
To integrate with docker push
create new step
go to pipeline syntax and look for the sample step below
withcredentials: bind credentials with variables
Go to binding and find "secret text"
Add Credentials as Jenkins
go ahead and put in your password or the text you want to convert to a secret
you will use the generated syntax with the below listed commands
sh 'sudo docker login -u username -p ${the variable gotten from the earlier generted token}
---
sh 'sudo docker login -u savagesquad300 -p ${dockerpass}'
       sh 'sudo docker tag tesla:1.0 savagesquad300/tesla:1.0'
       sh 'sudo docker push savagesquad300/tesla:1.0'
       }
